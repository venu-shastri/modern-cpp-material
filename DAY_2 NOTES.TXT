DEFAULT METHODS:-
          The 'default' keyword is applicable to the foll: compiler generated methods 
          1) Default constructor
          2) Copy constructor
          3) Assignment function.
         

In traditional C++ class, if none of the above methods are defined, it is generally assumed compiler would generate one.
      A default constructor when ?
        - A default constructor would be assumed under the foll: scenarios
        Traditional C++
          a) Virtual inheritance model
          b) A base has a default constructor, derived does not have any - then the compiler will assume one
             for the derived class.
          c) A class contains a data member, which is an object of another class having a default constructor, then
             the compiler would assume one for the container class.
          d) If the class is POLYMORPHIC by nature i.e. having OVER-RIDING and OVER-RIDABLE methods.
       Modern C++
          e) If the class is using in-class initializer feature, and no default constructor is defined, then
             the compiler will assume one.
              **************
       A copy constructor when ?
        If the class is not provided with any copy constructor, and the class consumer happens to copy construct
        objects of such a class, then the compiler is expected to generate a COPY CONSTRUCTOR.
       
       An Assignment function when ?
         If the class it not provided with an assignment function, and the class consumer happends to assign one or
         objects, then the compiler would assume one.
         
NOTE: If the above stated contexts do not apply for a class, then compiler will not assume any of the above stated methods.         
*******************
The default method in modern C++ world supports 2 things...
  a) States the intentions of the class author that they plan to depend upon the compiler synthesized methods and they don't plan to define anything of their own.
     In Traditional C++ class, if these methods are defined it is blindly assumed by the class consumer that the compiler will generate one.
     
      Where as now in modern C++, we as class authors can make our intentions very clear to the class consumer, that we plan to depend upon the compiler generated one. for eg:
      
      class CA
      {
      public:
        CA() = default;
        CA(const CA& x) = default;
        CA& operator =(const CA& x) = default;
      };   
  The above class is more expressive in its intent.
  
 b) It also supports the programmer to have a fine grained control over these compiler generated methods.
 
     We generally understand or know, that in a traditional C++ class if we don't happen to define these 
     methods, then the compiler will assume one and these compiler assumed methods will always be under
     'public' access-specifier of the class.
     
     But, now in modern C++ we as class authors can dictate or direct the compilers that they shall assume
     or provide these methods under the access-specifier of our choice not necessarily under 'public'.
     
     How ?
      Let the compiler assume a default constructor in 'public', the copy constructor and assignment function
      in private.
      
     class CA
     {
     private:
      CA(const CA& x)=default;
      CA& operator =(const CA& x)=default;
     public:
       CA()=default;
     };
        
     The above class is expressive to the class consumer, in its intent that the copy construction and 
     assignment operation is not permitted outside the class scope, shall be allowed only inside the class
     scope and these methods will be compiler generated ones.
------------------------------------------
DELETE METHODS:
          It is just the converse of default methods, dis-able certain operations, applicable to the foll: methods or problem scenarios...
          
          1) default constructor
          2) LVALUE copy constructor
          3) RVALUE copy constructor
          4) LVAUE assignment function
          5) RVALUE assignment function
          6) To dis-able the implementation of 'operator new' on certain class types
          7) To dis-able certain conversions.
          8) To dis-able certain template instantiations.

For Eg: in the traditonal C++ world, we as class authors wished, that instances of our class should not be allowed for copy construction nor assignment operation, then the only way was to define or declare our own methods under the 'private' access-specifier of the class.

class CA   //Traditional C++ class
{
private:
   CA(const CA& );
   CA& operator =(const CA& );
public:
    //all other methods will be defined under public
};          
        
A modern approach to address the above stated problem:

class CA
{
public:
  CA(const CA& x) = delete;
  CA& operator =(const CA& x) = delete;
};        
        
DELETE METHODS (contd...):-

In a modern C++ class, if a copy constructor or assignment function are tagged 'delete', it will not be possible to copy construct or carry out an assignment operation even inside the class scope.

Design a class whose heap instances shall not be permitted:-

Traditional C++ design, overload the 'operator new' under the private access-specifier of that class.

class CA
{
private:
  //..
  void* operator new(size_t size);
public:
  //...  
};

//consumer

CA* p = new CA;  //error, private member is not accessible.
****************
Now, in modern C++ we refactor the above code, declare the method under public and dis-able the same with 'delete'

class CA
{
private:
  //..
  
public:
  void* operator new(size_t size)=delete;
  //...  
};

//consumer

CA* p = new CA;  //error, It is a deleted function
----------------------------------------------------------------------------
OVERRIDE AND FINAL KEYWORDS:-

  - The override keyword is applicable to member functions of a POLYMORPHIC class family.
  - The final keyword is applicable both at class level and function level.

In a traditional C++ environment it is not possible for any class author to prevent their classes being further inherited. [Modern C++ we use 'final']

class CA{...};

class CB:public CA   //Now the author of 'class CB' cannot prevent a class from inherting it.
{...};  

class CC:public CB
{...};

Also, there was no facility or construct available in a traditional C++ environment, to prevent any methods being over-ridden in the derived class. For eg:
[Modern C++ we use 'final']
class Base
{
public:
  virtual void fun(){ }
};

class Derived1:public Base  //Now, what if Derived1 wants to prevent the 'fun' being over-ridden the derived class?
{                               //It is not possible in the traditional C++ world.
public:
   void fun()   //OVERRIDES the Base 'fun'
   { }
};

class Derived2:public Derived1
{
public:
  void fun()   //OVERRIDES THE Derived1 'fun'
  { }
};

What is the guarantee a derived class programmer, who attempts to override the base class virtual function(s), uses the correct or precise signature ?

class Base
{
public:
  virtual void fun(int x){ }
};

class Derived1:public Base  
{                              
public:
   void fun(int x)   //Signature matches exactly, thereby no issues
   { }
};

class Derived2:public Base
{
public:
  void fun(float x)  //signature mis-match, does not over-ride the base class method.
  { }
};

When a such a takes place with function signature mis-match, a Traditional C++ compiler will never issue any error or warning, rather it will smoothly compile and consider the method 'void fun(float)' as a new member function of the derived class.

Hypothetically the above 'Derived2' class can be seen as follows:

class Derived2:public Base
{
public:
  void Base::fun(int x)
  {  }
  
  void fun(float x)  //signature mis-match, considered as a new member function in Derived2 class
  { }
};
----------------------------------------
PUBLICIZER TECHNIQUE:

In C++ we do not have overload resolution across classes, any member function overloading should be confined to the same class. Any attempt in overloading the base class method(s) in the derived would hide all the base class versions.

class CA
{
public:
  void fun(int x);
  void fun(float x);
  void fun(char x);
  void fun(double x);
};

CA obj1;
//Every call will be successful, as all the overloaded methods in the same class.
obj1.fun(100);
obj1.fun(45.12f);
obj1.fun('r');
obj1.fun(56.12);

On the contrary, any overloading attempt across classes will hide the base versions.

class CA   //Base class
{
public:
  void fun();
  void fun(int x);
  
};

class CB:public CA
{
  //'fun' not overloaded in the derived 'CB'
};

CB obj1;

obj1.fun();  //ok, will call CA::fun();
obj1.fun(100); //ok, will call CA::fun(100);

But, in the foll: case there would be an issue

class CC:public CA
{
public:
  /*
    Since, we do not have overload resolutions across class, the derived class 'fun' will hide all
    the base class versions. In order to overcome this issue, we use PUBLICIZER TECHNIQUE i.e.
    expose the base class hidden methods in the derived class. Under the 'public' access-specifier
    of the derived class, add the foll: statement...
                using CA::fun;
  
  */
  using CA::fun;
  void fun(float x);   //An attempt to overload the base class 'fun' versions will hide the base versions..
};

CC obj1;

obj1.fun();  //error, no such function
obj1.fun(100); //warning, will still call CC::fun(float);
-----------------------------------------------------------------------------
Similar issues can also crop with MULTIPLE INHERITANCE...

class CA
{
public:
  void fun();
};

class CB
{
public:
  void fun(int);
};

class CC:public CA, public CB
{
public:
  void fun(float);   //Will hide all 'fun' versions of both CA and CB.
};

Expose the hidden methods of the Base class CA and CB...

class CC:public CA, public CB
{
public:
  using CA::fun;
  using CB::fun;
  void fun(float);   //Will hide all 'fun' versions of both CA and CB.
};
-------------------------------------------------
EXTENDED FRIEND DECLARATIONS:
  This modern C++ class feature, provides 3 distinct advantages...
  1) More type safe [trying to qualify a non-existent class as a friend]
  2) Helps in using alias or typedef names to qualify it as a friend
  3) A typename in a generic code can also make use of it in order to qualify itself as a friend to someone.
  
1) 

//Loop holes in a traditional approach.
class CB{ } ;
class CC{ };
//..
class CD
{
  friend class CA;    // This statement actually boils down to two diff. constructs...
                                a) class CA;   //acts as a forward declaration
                                b) friend CA; // now this CA becomes friend.
};
  
In the above example, the 'class CA' declaration does not precede the 'class CD' declaration, further there is no guarantee there would be 'class CA' declaration following the 'class CD' declaration.

  If the 'class CA' declaration exists foll: 'class CD', then it makes sense to qualify it as a friend.
  
  What if 'class CA' declaration does not exist foll: 'class CD' ?
  In traditional C++ code, it will happily compile, now there is an attempt to qualify a non-existent class a friend.

But,now in modern C++ we can trap such issues... by using the extended friend declaration syntax...

class CB{};
class CC{};
//..
class CD
{
  //Extended 'friend' declaration syntax, that avoids the 'class' keyword altogether
  friend CA;   //Error, at the point compiler has never encountered any class by the name 'CA',
               //whether the 'class CA' declaration follows 'class CD' or not, it is immaterial
};
  
What will work ?

class CA{};
class CB{};
//...

class CD
{
 friend CA;   //OK, will work as the declaration of 'CA' precedes this statement or 'class CD' declaration.
};  

2) 

In a traditional C++ code, it was not possible to use a typedef name for qualifying it as a friend, for eg:

class MyclassCB{..};

typedef MyclassCB CB;   //Now 'CB' is an alias to name to 'MyclassCB'

class CD
{
  friend class MyclassCB;   //ok, no problem, 
  friend class CB;  //ERROR, cannot use alias to typedef names to qualify it as a friend.
}; 

Whereas now in modern C++, with extended friend declaration syntax, we can qualify a typedef also a friend if we wish.

class MyclassCB{..};

typedef MyclassCB CB;   //Now 'CB' is an alias to name to 'MyclassCB'

class CD
{
  friend MyclassCB;   //ok, no problem, 
     (or)
  friend CB;  //ok, can use typedef names
}; 

3) 

In a traditional C++ code it is never possible to qualify a typename as a friend for eg:

template<typename T1, typename T2> class CA
{
  //in C++98 code
  friend class T1;    //error, cannot use typenames for qualifying it as a friend
  friend class T2;    //error, cannot use typenames for qualifying it as a friend
};

But now, in modern C++ we can achieve the same with extended friend declaration syntax...

template<typename T1, typename T2> class CA
{
  //in C++11 code
  friend  T1;    //ok, can use typenames for qualifying it as a friend
  friend  T2;    //ok, can use typenames for qualifying it as a friend
};

CA<int,float> obj1;

  friend int;          //These statements will be ignored automatically as they are not class types
  friend float;        //These statements will be ignored automatically as they are not class types
****************************
CA<CB,CC> obj2;

   friend CB;
   friend CC;
*************************
CA<CB, double> obj3;

   friend CB;
   friend double;   //will be ignored
----------------------------------------------------------
NESTED CLASS ACCESS RIGHTS:-

    In Traditional C++, if we happen to declare one class inside of another class, then we used to call them as nested class.
    This nesting attempt is not considered as member of the outer class, it is just scoping, instead of global scope, we happen to declare it inside another class scope...As such both the classes are independant of each other.
    
    for eg:
    
    class Outer
    {
      public:
         //...
      private:
         //..
      
      class Inner
      {
        private:
          //..
        public:
          //...
      };
    };

  In the above declaration, the class 'Inner' is scoped inside the class 'Outer', as such the public member functions of 'Inner' cannot access the private data of the 'Outer'.
  If there is any compulsion, that this nested class called 'Inner' must and should have access to the private 
  members of the 'Outer' class, then we have to qualify the 'Inner' as a friend to the 'Outer'.

    class Outer
    {
      friend class Inner;  //Now the 'Inner' can have access to the private data of 'Outer'
      public:
         //...
      private:
         //..
      
      class Inner
      {
        private:
          //..
        public:
          //...
      };
    };
But, now modern C++ a mere nesting of class declaration, it becomes a friend... There is nothing like we have had the friend declaration statement like in traditional C++ code.

    class Outer
    {
      public:
         //...
      private:
         //..
      
      class Inner     //By default this enclosed class [Inner] becomes a friend to the enclosing class [Outer]
      {
        private:
          //..
        public:
          //...
      };
    };
----------------------------------------------------------
RANGE-FOR CONSTRUCT:
  This loop construct is primarily designed to work on collection types, types hold arbitrary or finite quantum of values having a definite starting address and an definite ending address.
  
    for eg:
      - Could an array type
      - could be an instance of STL container class.

for(data_type var:collection_instance)
{
  //..
}      
  
list<int> ls1;
//...

//Given the foll: statement the range-for construct will loop thru from 'begin' to 'end' of the list collection, 
//for every looping or iteration, it would pick a value and initialize 'x'.
for(int x: ls1)
{
  //...
}  

How do we specify a particular starting and ending location for a given collection.

list<int> ls1;

We wish to start from the 40th index and proceed till only the 80th index of the collection

auto itr = ls1.begin();

list<int>::iterator start(itr+=40);    // start(itr.operator +=(40)); 
list<int>::iterator end(itr+=80);

for_each(start, end, function_name);
-------------------------------------------------------
How can the following 'class Data' be made range-for compatible type ?

The class has multiple data members of collections types..

class Data
{
private:
  int arr[10];
  list<int> ls1;
  vector<float> v1;
  //...
public:
  begin()
  {
  }
  
  end()
  {
  }
};

Let us refactor the above code, such that each collection data-member is an instance of a seperate class...

class intArray
{
private:
  int arr[10];
public:
  auto begin(){ return arr; }
  auto end(){ return &arr[10]; }  
};

class intList
{
private:
  list<int> ls1;
public:
    auto begin(){ return ls1.begin(); }
    auto end(){ return ls1.end(); }
};

class floatVector
{
private:
  vector<float> v1;
public:
    auto begin(){ return v1.begin(); }
    auto end(){ return v1.end(); }
};

Now the modified 'class Data' will look as follows:

class Data
{
private:
  intArray ob1;
  intList ob2;
  floatVector ob3;
public:
    //...
    //provide suitable getter functions
    intArray& GetArray()
    {
       return ob1;
    }
    
    intList& GetList()
    {
       return ob2;
    }
    
    floatVector& GetVector()
    {
      return obj3;
    }
};

//***consumer code**********
int main()
{
  Data obj1;
                 //Data::ob1
  for(auto x: obj1.GetArray())
  {
    //....
  }
             // Data::ob2
  for(auto x:obj1.GetList())
  {
    //..
  }
             // Data::ob3
  for(auto x:obj1.GetVector())
  {
    //..
  }
}
----------------------------------------------  
UNIFORM INITIALIZATION OR BRACE INITIALIZATION SYNTAX:-

int a{};
int b{100};

list<int> ls1 ={10,20,30,40,50,60};



INITIALIZER_LIST type:-
    Now in modern C++11 standards onwards, we are provided with a light-weight wrapper class, whose instance can accomodate or hold arbitrary number of values of homogenous types.
    An instance of this type becomes very handy providing lot of flexibilities both to the class author as well to the class library consumer, particularly the data members of class are all collection types, and they have initialized or populated by the class consumer.
    
//Traditional C++ approach

class CA
{
private:
  int arr[100];
public:
  //need to provide a constructor to initialize the above array...
  
  CA(int* p)
  {
    for(int i=0;i<100;i++)
    {
      arr[i] = p[i];
      i++;
    }
  }
  
  CA(int x1, int x2, int x3... int x10):a[0](x1), a[1](x2),.... a[9](x10)
  {
  }
};    
  
//***consumer code****
int main()
{
  CA obj1(10,20,30,40...);  //approach-1
  
  CA ar[10] ={....};
  CA obj1(ar);   //approach-2
}  
******************
Now in modern C++ it is far more easy to accept arbitrary number of parameters to initialize any collection type data members of a class.

class CA
{
private:
  list<int> ls1 = {10,20,30,40,50,50};
};
  
The brace initialization syntax or the uniform initialization syntax by the compiler is inferred in different ways depending on the context where and how it is used.

for eg:
CONTEXT-1 when declaring primitive type variables...

int a=10;
int a(10);
//modern approach
int a{10};   // here the brace syntax is inferred as initialization syntax for the primitive variable.

//local variables
int x1;    //will hold garbage value
int x2{};  // will hold zero.
  
CONTEXT-2, when used with new operator function, for creating an array of instances

CA* p = new(nothrow) CA[5]{{},{10},{10,20},{100},{} };  
  
    Given the above statement the inference by the compiler is to pass each parameter to its respective constructors.
-------------------------------------
CONTEXT-3, When used with STL container objects...

When STL container instances are initialized with brace initialization syntax, then the inference by the compiler is to first convert the complete range of values in the braces to the type 'initializer_list'.

list<int> ls1 ={10,20,30,40,50,60};
              = initializer_list<int>{....};
list<int> ls1(initializer_list<int>{....});              

vector<int> v1 ={100,200,300,400};
              = initializer_list<int>{....};
vector<int> v1(initializer_list<int>{....});     

Note: Every STL container classes have now been provided with additional overloaded constructor in their classes, that take 'initializer_list' as its parameter

template<typename T> class list
{
public:
  //...
  list(initializer_list<T>& ob)
  {
    //...
  }
};
    
---------------------------------------------------
MODERN C++ TEMPLATE FEATURES:

Default arguments for function templates:-

In traditional C++ there was no support for default types while defining a function template, The default types were only permitted for class templates...

for eg:
      //function template
      template<typename T=double> void fun(T X)  // error,in the typename list we could not provide the default type
      {... }
      
      But, the same was permitted only for class templates...
      template<typename T = double> class CA   //default type allowed for class templates in C++98/2003 standards
      { };
  But, now in modern C++ we can not only provide default arguments for a generic function, as well we can also provide default type for a generic function, for eg:
  
  The default type in the typename list and the default argument to the formal parameter of a generic function has to type compatible.
  template<typename T = double> void fun(T x=34.12)  
      {... }
  
***************************
RVALUE & LVALUE types:

Entities that can be present either on the left hand side of an equation or on the right hand side of an equation is an LVALUE type [stands for LEFT HAND SIDE VALUE]. For eg: It could be any named entity.

Entities that can only be present on the right hand side of an equation are known as RVALUE types [stands for RIGHT HAND SIDE VALUE]. For eg: It could be any literal (numeric/non-numeric/class type), entities that generally do not have a name. Even the return value of a function is RVALUE, because this temporary does not have any name.


int fun()
{
  int a;   //LVALUE
  //...
  return a;    //assume it is returning 100
} 


int main()
{
  int result;   //LVALUE
  //..
  result = fun();    // result = 100;
}

Let us consider the foll: equations...

int a,b;
a = 100;           // LVALUE = RVALUE
b = a;             // LVALUE = LVALUE

100 = a;      //error  
------------------------------------------------------  
Now in modern C++ a reference type entity can be categorized into 2 diff. forms or types..

         REFERENCE TYPE
              |
       |----------------|
    lvalue            rvalue

What is the syntax for declaring a lvalue and rvalue reference types...

LVALUE REFERENCE TYPE: At the point of declaration of an entity, prefixing a single '&' is termed as LVALUE reference type.

int a;
int& ref = a;

RVALUE REFERENCE TYPE: At the point of declaration, prefixing it with a 2 '&' is termed as RVALUE reference type.

for eg:

int&& ref1 = a;
int&& ref2 = 100;

So, in a modern C++ class we can have a pair of copy constructor and a pair of assignment function.

class CA
{
public:
  //LVALUE PAIR
  CA(const CA& x);
  CA& operator = (const CA& x);
  
  //RVALUE PAIR
  CA(CA&& x);
  CA& operator =(CA&& x);
};
--------------------------------------------
REFERENCE COLLAPSING:-

template<typename T> void fun3(T& x)   // void fun3(int&& & & x)   //int& 
{ 

}

template<typename T> void fun2(T& x)   // void fun2(int&& & x)     ===>int&
{ 
   fun3(x);
}

template<typename T> void fun1(T& x)  // void fun1(int&& x)    ===> int& 
{ 
   fun2(x);
}

template<typename T> void fun(T& x)  // void fun(int& x)  T ===> int&
{ 
  fun1(x);
}

//***consumer code******
int main()
{
  int a;
  fun(a);
}


        